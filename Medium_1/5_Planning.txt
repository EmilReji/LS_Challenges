A circular buffer, cyclic buffer or ring buffer is a data structure that uses a single, fixed-size buffer as if it were connected end-to-end.

A circular buffer first starts empty and of some predefined length. For example, this is an empty 7-element buffer:

[ ][ ][ ][ ][ ][ ][ ]
Assume that a 1 is written into the middle of the buffer (exact starting location does not matter in a circular buffer):

[ ][ ][ ][1][ ][ ][ ]
Then assume that two more elements are added, or written to the buffer — 2 & 3 — which get appended after the 1:

[ ][ ][ ][1][2][3][ ]
If two elements are then read, or removed from the buffer, the oldest values inside the buffer are removed. The two elements removed, in this case, are 1 & 2, leaving the buffer with just a 3:

[ ][ ][ ][ ][ ][3][ ]
If the buffer has 7 elements then it is completely full:

[6][7][8][9][3][4][5]
When the buffer is full an error will be raised, alerting the client that further writes are blocked until a slot becomes free.

The client can opt to overwrite the oldest data with a forced write. In this case, two more elements — A & B — are added and they overwrite the 3 & 4:

[6][7][8][9][A][B][5]
Finally, if two elements are now removed then what would be returned is not 3 & 4 but 5 & 6 because A & B overwrote the 3 & the 4 yielding the buffer with:

[ ][7][8][9][A][B][ ]

General:
When object initialized, takes a single integer for setting size of buffer
Have 4 instance variables
- size
- buffer referencing an array of values
- current for most recent val
- oldest for oldest val
A write method takes a single param for adding a value to the buffer
- If isFull true, then raise exception
- If param is nil, should not be added
- If isFull false and param isn't nil, then increment current by one (use method) and add to that index
A write! method takes a single param for adding a value to the buffer
- If isFull true, then overwrite oldest value; increment oldest
  - Take 
- If param is nil, should not be added
- If isFull false, then just call normal write
A read method removes and returns the oldest value
- If isEmpty true, raise exception
- If isEmpty false, return arr[oldest]
- Then increment oldest (use method)
A clear method which deletes all values in the buffer
- Just replace with new empty arr of same size
Private Methods:
A method to increment the index
- increments index by one
- if greater than buffer size - 1, then set to 0
isFull method
- use number of nils (should be 0 if full); nil will be default value when nothing has been added; works since nil not allowed as a element
isEmpty method